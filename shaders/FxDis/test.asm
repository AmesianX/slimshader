//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//
///
// Buffer Definitions: 
//
// cbuffer cbuf0
// {
//
//   float4 cool;                       // Offset:    0 Size:    16
//   int4 zeek;                         // Offset:   16 Size:    16
//   int2 arr[127];                     // Offset:   32 Size:  2024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samp0                             sampler      NA          NA    0        1
// samp1                             sampler      NA          NA    1        1
// tex0                              texture  float4          2d    0        1
// tex1                              texture  float4        cube    1        1
// tex2                              texture  float4          3d    2        1
// tex3                              texture  float4       2dMS2    3        1
// tex4                              texture  float4          2d    4        2
// cbuf0                             cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float    yzw
// TEXCOORD                 1   xyzw        1     NONE   float   x   
// SV_POSITION              0   xyzw        2      POS   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[129], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2dms(2) (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v0.yzw
dcl_input_ps linear centroid v1.x
dcl_input_ps_siv linear noperspective v2.x, position
dcl_output o0.xyzw
dcl_temps 11
dcl_indexableTemp x0[8], 4
dcl_indexableTemp x1[4], 4
dcl_indexableTemp x2[4], 4
ftou r0.x, v2.x
utof r0.x, r0.x
dp3 r0.y, v0.yzwy, l(1.000000, 2.000000, 3.000000, 0.000000)
add r0.x, r0.y, r0.x
add r0.x, r0.x, v1.x
xor r0.y, cb0[1].y, l(2)
itof r0.y, r0.y
add r0.x, r0.y, r0.x
mov r0.y, r0.x
mov r0.z, l(0)
loop 
  ige r0.w, r0.z, l(10)
  breakc_nz r0.w
  itof r0.w, r0.z
  add r1.x, r0.w, l(1.001000)
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  sqrt r1.y, r0.y
  mad r0.w, r0.w, r1.x, r1.y
  add r0.w, r0.w, r0.y
  lt r1.x, r0.w, l(0.000000)
  if_nz r1.x
    mov r0.y, r0.w
    break 
  endif 
  iadd r0.z, r0.z, l(1)
  mov r0.yz, r0.wwzw
endloop 
ftoi r0.x, r0.y
ilt r0.w, r0.x, l(0)
if_nz r0.w
  xor r0.w, r0.x, l(50)
else 
  ilt r1.x, l(5), r0.x
  if_nz r1.x
    and r0.w, r0.x, l(2222)
  else 
    iadd r0.w, r0.x, -cb0[r0.x + 2].x
  endif 
endif 
add r0.x, cb0[0].y, cb0[0].x
add r0.x, r0.x, cb0[0].z
add r0.x, r0.x, cb0[0].w
add r0.x, r0.x, r0.y
sample r1.xyzw, l(0.125000, 5.000000, 0.000000, 0.000000), t0.xyzw, s0
add r0.x, r0.x, r1.x
sample r1.xyzw, l(0.777000, 1234.500000, 0.000000, 0.000000), t0.xyzw, s1
add r0.x, r0.x, r1.x
sample r1.xyzw, l(0.125000, 5.000000, 1.000000, 0.000000), t1.xyzw, s0
add r0.x, r0.x, r1.x
sample r1.xyzw, l(0.125000, 5.000000, 1.000000, 0.000000), t2.xyzw, s0
add r0.x, r0.x, r1.z
ldms_aoffimmi(1,1,0) r1.xyzw, l(0, 5, 0, 0), t3.xyzw, l(0)
add r0.x, r0.x, r1.x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample_b r1.xyzw, r0.xyxx, t0.xyzw, s0, l(-15.000000)
add r0.x, r0.x, r1.y
sample r1.xyzw, l(0.000000, 5.000000, 0.000000, 0.000000), t4.xyzw, s0
add r0.x, r0.x, r1.z
sample r1.xyzw, l(0.000000, 5.000000, 0.000000, 0.000000), t5.xyzw, s0
add r0.x, r0.x, r1.z
itof r0.yz, r0.wwzw
mov x1[3].x, r0.y
mov x2[2].x, r0.y
mov x1[2].x, r0.x
mov x2[1].x, r0.x
and r0.y, r0.w, l(0x00087e85)
itof r0.w, r0.y
mov x0[0].x, r0.w
mov x2[0].x, r0.w
iadd r1.x, r0.y, l(42)
itof r1.x, r1.x
mov x0[1].x, r1.x
mov x2[3].x, r1.x
ishr r0.y, r0.y, l(76)
itof r1.x, r0.y
mov x1[1].x, r1.x
mov x0[2].x, r1.x
ishl r0.y, r0.y, l(22)
mov x0[3].x, l(0)
mov x1[0].x, l(0)
mov x0[4].x, l(0)
mov x0[5].x, l(0)
xor r1.x, l(0), cb0[2].x
utof r1.y, r1.x
mov x0[6].x, r1.y
and r1.y, r1.x, l(127)
and r1.x, r1.x, cb0[r1.y + 2].x
utof r1.y, r1.x
iadd r1.xz, r1.xxxx, l(66, 0, 1, 0)
imul null, r1.x, cb0[r1.z + 2].x, cb0[r1.x + 2].y
itof r1.x, r1.x
add r0.x, r0.x, r1.x
add r1.x, r0.x, r1.y
mov x0[7].x, r1.x
add r0.z, r0.w, r0.z
ftoi r0.w, r0.z
and r0.w, r0.w, l(7)
mov r0.w, x0[r0.w + 0].x
itof r0.y, r0.y
add r0.y, r0.w, r0.y
ftoi r0.w, r0.y
and r0.w, r0.w, l(7)
mov r1.x, x1[r0.w + 0].x
add r0.z, r0.z, r1.x
mov r0.w, x2[r0.w + 0].x
round_z r0.z, r0.z
add r0.z, r0.w, r0.z
mul r2.z, r0.x, l(0.200000)
add r2.w, r1.y, l(0.500000)
round_z r2.xy, r0.zyzz
mov r3.z, r0.x
mov r3.w, r1.y
mov r3.xy, r2.xyxx
mov r0.y, l(0)
loop 
  ftoi r0.z, r3.x
  ige r0.z, r0.y, r0.z
  breakc_nz r0.z
  itof r4.x, r0.y
  mov r5.xyzw, r3.xyzw
  mov r0.z, l(0)
  loop 
    ftoi r0.w, r5.y
    ige r0.w, r0.z, r0.w
    breakc_nz r0.w
    itof r4.y, r0.z
    sample_d r6.xyzw, r4.xyxx, t0.xyzw, s0, l(1.500000, 1.500000, 0.000000, 0.000000), l(4.100000, 4.100000, 0.000000, 0.000000)
    mov r7.xyzw, r5.xyzw
    mov r0.w, l(0)
    loop 
      ftoi r1.x, r7.x
      ige r1.x, r0.w, r1.x
      breakc_nz r1.x
      itof r8.x, r0.w
      mov r9.xyzw, r7.xyzw
      mov r1.x, l(0)
      loop 
        ftoi r1.z, r9.y
        ige r1.z, r1.x, r1.z
        breakc_nz r1.z
        itof r8.y, r1.x
        sample_d r10.xyzw, r8.xyxx, t0.xyzw, s0, l(1.500000, 1.500000, 0.000000, 0.000000), l(4.100000, 4.100000, 0.000000, 0.000000)
        add r9.xyzw, r10.xyzw, r9.xyzw
        iadd r1.x, r1.x, l(1)
      endloop 
      mov r7.xyzw, r9.xyzw
      iadd r0.w, r0.w, l(1)
    endloop 
    mad r8.xyzw, r7.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(1.100000, 2.200000, 3.300000, 4.400000)
    mad r6.xyzw, r8.xyzw, l(55566.199219, 55566.199219, 55566.199219, 55566.199219), r6.xyzw
    add r5.xyzw, r6.xyzw, r5.xyzw
    iadd r0.z, r0.z, l(1)
  endloop 
  mov r3.xyzw, r5.xyzw
  iadd r0.y, r0.y, l(1)
endloop 
mad r0.xyzw, r3.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), r2.xyzw
add o0.xyzw, r0.xyzw, l(1.100000, 2.200000, 3.300000, 4.400000)
ret 
// Approximately 159 instruction slots used
