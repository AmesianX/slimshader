//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//
///
// Buffer Definitions: 
//
// cbuffer $Params
// {
//
//   bool bTexture;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// MeshTextureSampler                sampler      NA          NA    0        1
// MeshTextureSampler                texture  float4          2d    0        1
// $Params                           cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- In.Position.x; v0.y <- In.Position.y; v0.z <- In.Position.z; v0.w <- In.Position.w; 
//   v1.x <- In.Diffuse.x; v1.y <- In.Diffuse.y; v1.z <- In.Diffuse.z; v1.w <- In.Diffuse.w; 
//   v2.x <- In.TextureUV.x; v2.y <- In.TextureUV.y; 
//   o0.x <- Output.RGBColor.x; o0.y <- Output.RGBColor.y; o0.z <- Output.RGBColor.z; o0.w <- Output.RGBColor.w
//
#line 111 "C:\Users\Tim Jones\Documents\GitHub\slimshader\shaders\Sdk\Direct3D11\BasicHLSL11\BasicHLSL.fx"
if_nz cb0[0].x
  sample r0.xyzw, v2.xyxx, t0.xyzw, s0
  mul o0.xyzw, r0.xyzw, v1.xyzw
else 
  mov o0.xyzw, v1.xyzw  // o0.x <- Output.RGBColor.x; o0.y <- Output.RGBColor.y; o0.z <- Output.RGBColor.z; o0.w <- Output.RGBColor.w
endif 
ret 
// Approximately 7 instruction slots used
